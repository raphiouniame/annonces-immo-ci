# create_admin_auto.py
"""
Script automatis√© pour cr√©er ou promouvoir un utilisateur administrateur.
Utilise des variables d'environnement pour les identifiants.
"""

import os
import sys
from app import create_app
from models import db, User
from werkzeug.security import generate_password_hash
from sqlalchemy import inspect


def create_admin():
    """Cr√©e ou promeut un utilisateur en administrateur"""
    app = create_app()

    with app.app_context():
        try:
            # V√©rifier que la table 'user' existe
            inspector = inspect(db.engine)
            if not inspector.has_table('user'):
                print("‚ùå ERREUR : La table 'user' n'existe pas. Appliquez les migrations (alembic upgrade head).")
                sys.exit(1)

            # R√©cup√©rer et nettoyer les variables d'environnement
            ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME', 'admin').strip()
            ADMIN_PHONE = os.environ.get('ADMIN_PHONE', '+221123456789').strip()
            ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD', 'admin123').strip()

            # === V√©rifications de s√©curit√© ===
            if not ADMIN_USERNAME:
                print("‚ùå ERREUR: ADMIN_USERNAME ne peut pas √™tre vide.")
                sys.exit(1)

            if not ADMIN_PASSWORD:
                print("‚ùå ERREUR: ADMIN_PASSWORD ne peut pas √™tre vide.")
                sys.exit(1)

            # Interdire le mot de passe par d√©faut en production
            if ADMIN_PASSWORD == 'admin123' and os.environ.get('FLASK_ENV') == 'production':
                print("‚ùå ERREUR: Mot de passe par d√©faut d√©tect√© en production!")
                print("   D√©finissez ADMIN_PASSWORD dans les variables d'environnement.")
                sys.exit(1)

            # V√©rifier si l'utilisateur existe d√©j√†
            existing = User.query.filter_by(username=ADMIN_USERNAME).first()

            if existing:
                if existing.is_admin:
                    print(f"‚ÑπÔ∏è  L'administrateur '{ADMIN_USERNAME}' existe d√©j√†.")
                else:
                    # Promouvoir l'utilisateur en admin
                    existing.is_admin = True
                    db.session.commit()
                    print(f"‚¨ÜÔ∏è  Utilisateur '{ADMIN_USERNAME}' promu en administrateur !")
            else:
                # Cr√©er un nouvel admin
                new_admin = User(
                    username=ADMIN_USERNAME,
                    phone=ADMIN_PHONE,
                    password=generate_password_hash(ADMIN_PASSWORD),
                    is_admin=True
                )
                db.session.add(new_admin)
                db.session.commit()
                print(f"‚úÖ Administrateur '{ADMIN_USERNAME}' cr√©√© avec succ√®s !")

            # Informations de connexion (sans mot de passe)
            print(f"üîë Nom d'utilisateur: {ADMIN_USERNAME}")
            print("üîë Mot de passe: (d√©fini via ADMIN_PASSWORD - non affich√© pour des raisons de s√©curit√©)")

        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation ou de la promotion de l'admin : {e}")
            sys.exit(1)


if __name__ == '__main__':
    create_admin()